함수

function 함수명(....)
	//연산이 처리되는 부분
	
	return 반환값;
}

function sum(X) {
	const result = X * 2 + 2;
	
	return result;
}


함수를 사용하는 방법?
함수명();
함수명(값, 값...)

변수의 끌어올림(hoisting)
	- 함수의 정의된 위치와 상관없이 쓸 수 있다
	- 함수의 인수 생략가능
	- 반환값 생략 가능
		-> 반환값을 생략하게되면 return undefined; 가 자동으로 추가
		

함수가 호출되는 메모리 영역

메모리
1. 데이터영역 - 작성한 소스...
2. 스택영역 - 함수가 실행되면 올라가는 영역
3. 힙영역 - 객체를 생성하면 올라가는 영역


전역변수
	- 함수 내부, 외부 모두 유효한 변수
지역변수
	- 함수 내부에서만 유효한 변수
	
			function sum() {
				const a = 10;
				const b = 20;
			}
함수 내부에 정의된 a, b  -> 함수가 실행되는 동안에만 메모리에 있음
								-> 함수의 실행이 끝나면 메모리에서 제거된다
								-> 함수가 실행되는 동안에만 유효한 변수
								

자바스크립트 함수 -> 1급 객체
	1. 인수를 함수로 쓸 수 있다
		function testFunc (innerFunc) {
			innerFunc();
		}

		const innerFunc = function() {
			console.log('innerFunc');
		};
			-> testFunc(innerFunc);
				-> innerFunc
				
				
		testFunc(function() {
			console.log('인수로 함수 호출');
		});		
			-> 인수로 함수 호출
			
			
		function testFunc(innerFunc) {
			const event = '이벤트';
			innerFunc(event);
		}

		-> testFunc(function(event) {
				console.log(event);
			});

			-> 이벤트

	2. 함수를 반환값으로 쓸 수 있다
	
		function 브라우저의 메인함수() {
			function testFunc(); {
			}
		}
		
		
		function 브라우저의 메인함수() {
			const global = 'global';
			
			function testFunc(); {
				const local = 'local';
			}
		}
	
	3. 일반적으로 선언하는 변수는 스택 메모리 영역에 정의된다	
	
	
	
	
	
	
	function innerFuunc() {
	
	}
		--> 함수의 끌어올림이 가능, 호출 위치는 상관없다
	
	
	
		const innerFunc = function() {
		
		};
		--> 함수의 끌어올림이 불가능, 호출은 바로 다음부터 가능
		
			1. const innerFunc; 선언
			2. window.innerFunc = undefiner;
			3. const innerFunc = function() {} 함수가 대입
			
	
	
	
함수를 즉시 싱행하는 방법
		(function() {
			alert('즉시 실행');
		})();
		
			1) 인수 사용가능
				(function(*a,b) {
				
				})(2, 3);
				
							ex)
								(function(a,b) {
										console.log(a + b);
								})(2,3);
			
			2) 반환값 사용가능
				(function(a,b) {
						console.log(a + b);
				})(2,3);
						
							ex)
								const result = (function(a,b) {
									return a+b;
								})(2,3);
								

가변 인수
	함수안에는 arguments 변수가 존재
		1) 인수로 사용된 값을 배열 객체로 보관
		
			function testFunc(a, b) {
				for(let i = 0; i < arguments.length; i++) {
					str += arguments[i] + ',' ;
				}
				
				return str;
			}
			
			testFunc(1,2,3,4,5,6,7,8);
			
			testFunc(1,2,3);
			
		2) ...인수(마침표 3개)	
			- 가변인수(개수 상관없이 입력할 수있는 인수)
			
				function testFunc(...str) {
					console.log(str);
				}
				
				testFunc(1,2,3,4);
				
				function testFunc(separator, ...str) {
					console.log(separator);
					console.log(str);
				}
				
				testFunc('/', 'apple', 'mango', 'orange', 'banana');