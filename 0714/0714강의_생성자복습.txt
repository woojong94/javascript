생성자
	- 객체를 생성하는 틀
	- 객체를 생성하기 위한 속성, 메서드의 틀을 제공
	
	function 생성자명(....) {
		this.속성명 = '값';	//원시타입 + 객체 ....
	}
	
		ex)
			function Person() {
				this.age = 40;
				this.gender = 'F';
				this.study = function() {
					console.log('공부한다');
				};
			}
	
객체를 생성하기위한 연산자	
	new
		ex)
			const person1 = new Person();
			const person2 = new Person();
			...
			const person10 = new Person();
	
	
		데이터 영역
		힙 영역 - 객체는 힙 영역에 생성, 객체- 인스턴스
					ex)
						new Person();
						new Person();
						new Person();
		
		스택 영역 - 변수는 스택 영역에 생성, (힙 영역에 생성된 객체를 찾을 수 있는 주소)
					ex)
						const person1
						const person2
						const person3
						
							ex) const person2 = person1;    --> person2와 person1의 주소가 동일해진다
							ex) const func1 = function() {
									console.log('함수 호출');
								 };
								 -> func1();
									-> 함수 호출
								-> func2();
									-> 함수 호출
							
			
자바스크립트 - 원시타입 + 객체(함수도 객체)
		
		function Person(name, age, gender) {
			this.name = name;
			this.age = age;
			this.gender = gender;
			this.study = function() {
				console.log('공부한다');
			};
		}
		
		const person1 = new Person('이름1', 30, 'F');
		const person2 = new Person('이름2', 34, 'M');
		
			this와 person1....person5dml 주소가 같다(this는 내부, person1...은 외부)
			

생성자의 구성
	- prototype
		- constructor	-> 생성자 함수의 원형 - new 연산자를 통해 생성이 가능
		- __proto__		-> 객체의 상속관계
		
		생성자에 정의된 함수가 10개
			- 객체를 10개 생성 -> 함수는 총 100개의 동일한 함수 복사
			- 메모리의 낭비
			- 데이터 영역의 prototype에 정의하면 모든 객체가 공유
				-> 100개가 아닌 10개만 공유
				
	생성자
		- 생성자명은 대문자로 시작
			- 단어 첫 글자는 대문자 -> 가장 첫글자는 대문자로 시작(파스칼 케이스)
				function OrderProcess() {
				}
		
		- 함수명은 소문자로 시작
			- 단어 첫 글자는 대문자 -> 가장 처음 단어는 소문자로 시작(카멜 케이스)
				function orderProcess() {
				}
				
		- 변수명도 카멜케이스 방식으로 정의하는 것을 권장
		