생성자
	- 객체를 생성
	- 객체를 만드는 틀

	함수 객체를 가지고 생성자를 만든다
	
	function 생성자명(...) {
		// 생성자 정의
		this.속성명 = 값; (원시타입, 객체, 함수 객체)
	}					--> 틀을 만든다
	
				ex)
				function Person() {
					this.age = 40;
					this.gender = 'F';
					this.walk - function() {
						console.log('걷기');
					};
				}
	
	객체 생성 연산자
	new
				
				ex)
				const person = new person();
				const person1 = new person();
					2, 3, 4 ...
	

					person, person1 ... --> 스택 영역
					new person(); ... 	--> 힙 영역
						생성자로부터 객체가 힙 영역에 생성
			
	생성된 객체 - 인스턴스
	
	function Person() {
		this.age = 40;
		this.gender = 'F';
		this.walk - function() {
			console.log('걷기');
		};
	}
	
	정의된 속성 접근은 객체 생성 이후 접근이 가능
	this --> 객체가 생성이된 후 존재
		 --> 생성된 객체(인스턴스) 주소를 가지고있는 변수
		 --> 생성자 내부에만 존재하는 변수
		 --> 생성자 내부에 생성된 생성자 변수와 동일한 주소를 갖고있다
		 --> 차이점은 외부, 내부
		 
			const person1 = new person();
			this와 person1은 동일한 주소를 갖는다
			(내부)	(외부)
			
	함수 -> 함수 역할, 생성자 역할		
		관례적으로 함수는 앞글자가 소문자로 쓴다
		관례적으로 생성자는 앞 첫글자를 대문자로 쓴다
		
		함수명 명명 방식
			- 단어의 시작은 대문자 -> 첫 글자는 소문자 -> 카멜케이스(일반변수도 사용)
				ex) function orederProcess() {
					}
		생성자 명명 방식
			- 단어의 시작은 대문자 -> 첫 글자도 대문자 -> 파스칼 케이스
				ex) function OrderProcess() {
					}
			
			
			

	생성자 인수 --> 객체 생성시 초기화 역할
				초기화: 값을 선언할 때 대입하는 것
				
				ex)
					function Person(age, gender) {
						this.age = age;
						this.gender = gender;
					}
					
					const person1 = new Person(40, 'F');
						-> Person {age: 40, gender: "F"}
					const person2 = new Person(50, 'M');
						-> Person {age: 50, gender: "M"}

	즉시 실행 함수
	호출을 하는 별도 없이 바로 호출
		(function() {
			//즉시 실행할 부분
		})();
		
		(function(a, b) {
			//실행 영역
			
			//반환 값 정의 가능
		})(2, 3);
				
				
		
		ex)
			(function(a, b) {
				alert(a+b);
			})(2, 3);
			
		ex) 
			const result = (function(a, b) {
				return a + b;
			})(2, 3);